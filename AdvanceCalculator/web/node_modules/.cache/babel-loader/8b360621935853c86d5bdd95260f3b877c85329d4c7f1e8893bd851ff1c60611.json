{"ast":null,"code":"import React,{useState}from'react';import Display from'./Display';import BasicKeypad from'./BasicKeypad';import ScientificKeypad from'./ScientificKeypad';import FinancialKeypad from'./FinancialKeypad';import UnitConverter from'./UnitConverter';import History from'./History';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Calculator=()=>{const[mode,setMode]=useState('basic');const[displayValue,setDisplayValue]=useState('0');const[previousValue,setPreviousValue]=useState(null);const[operation,setOperation]=useState(null);const[waitingForOperand,setWaitingForOperand]=useState(false);const[history,setHistory]=useState([]);const clearAll=()=>{setDisplayValue('0');setPreviousValue(null);setOperation(null);setWaitingForOperand(false);};const inputDigit=digit=>{if(waitingForOperand){setDisplayValue(digit);setWaitingForOperand(false);}else{setDisplayValue(displayValue==='0'?digit:displayValue+digit);}};const inputDecimal=()=>{if(waitingForOperand){setDisplayValue('0.');setWaitingForOperand(false);}else if(displayValue.indexOf('.')===-1){setDisplayValue(displayValue+'.');}};const performOperation=nextOperation=>{const inputValue=parseFloat(displayValue);if(previousValue===null){setPreviousValue(displayValue);}else if(operation){const currentValue=parseFloat(previousValue);const newValue=calculate(currentValue,inputValue,operation);setDisplayValue(String(newValue));setPreviousValue(String(newValue));addToHistory(`${currentValue} ${operation} ${inputValue} = ${newValue}`);}setWaitingForOperand(true);setOperation(nextOperation);};const calculate=(firstValue,secondValue,operation)=>{switch(operation){case'+':return firstValue+secondValue;case'-':return firstValue-secondValue;case'×':return firstValue*secondValue;case'÷':return firstValue/secondValue;default:return secondValue;}};const addToHistory=calculation=>{setHistory(prev=>[calculation,...prev.slice(0,9)]);};const clearHistory=()=>{setHistory([]);};const renderKeypad=()=>{switch(mode){case'basic':return/*#__PURE__*/_jsx(BasicKeypad,{onDigitPress:inputDigit,onDecimalPress:inputDecimal,onOperationPress:performOperation,onClear:clearAll,onEquals:()=>{if(operation&&previousValue){const inputValue=parseFloat(displayValue);const currentValue=parseFloat(previousValue);const newValue=calculate(currentValue,inputValue,operation);setDisplayValue(String(newValue));setPreviousValue(null);setOperation(null);setWaitingForOperand(true);addToHistory(`${currentValue} ${operation} ${inputValue} = ${newValue}`);}}});case'scientific':return/*#__PURE__*/_jsx(ScientificKeypad,{onDigitPress:inputDigit,onDecimalPress:inputDecimal,onOperationPress:performOperation,onClear:clearAll,displayValue:displayValue,setDisplayValue:setDisplayValue,addToHistory:addToHistory});case'financial':return/*#__PURE__*/_jsx(FinancialKeypad,{onDigitPress:inputDigit,onDecimalPress:inputDecimal,onOperationPress:performOperation,onClear:clearAll,displayValue:displayValue,setDisplayValue:setDisplayValue,addToHistory:addToHistory});case'converter':return/*#__PURE__*/_jsx(UnitConverter,{});default:return null;}};return/*#__PURE__*/_jsxs(\"div\",{className:\"calculator-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"calculator-header\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"calculator-title\",children:\"Advanced Calculator\"}),/*#__PURE__*/_jsx(\"div\",{className:\"mode-selector\",children:['basic','scientific','financial','converter'].map(modeOption=>/*#__PURE__*/_jsx(\"button\",{className:`mode-button ${mode===modeOption?'active':''}`,onClick:()=>setMode(modeOption),children:modeOption.charAt(0).toUpperCase()+modeOption.slice(1)},modeOption))})]}),/*#__PURE__*/_jsx(Display,{value:displayValue}),mode!=='converter'&&/*#__PURE__*/_jsx(History,{history:history,onClear:clearHistory,onSelect:value=>setDisplayValue(value)}),/*#__PURE__*/_jsx(\"div\",{className:\"keypad-container\",children:renderKeypad()})]});};export default Calculator;","map":{"version":3,"names":["React","useState","Display","BasicKeypad","ScientificKeypad","FinancialKeypad","UnitConverter","History","jsx","_jsx","jsxs","_jsxs","Calculator","mode","setMode","displayValue","setDisplayValue","previousValue","setPreviousValue","operation","setOperation","waitingForOperand","setWaitingForOperand","history","setHistory","clearAll","inputDigit","digit","inputDecimal","indexOf","performOperation","nextOperation","inputValue","parseFloat","currentValue","newValue","calculate","String","addToHistory","firstValue","secondValue","calculation","prev","slice","clearHistory","renderKeypad","onDigitPress","onDecimalPress","onOperationPress","onClear","onEquals","className","children","map","modeOption","onClick","charAt","toUpperCase","value","onSelect"],"sources":["/Users/alokrathaur/Documents/testProject/web/src/components/Calculator.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Display from './Display';\nimport BasicKeypad from './BasicKeypad';\nimport ScientificKeypad from './ScientificKeypad';\nimport FinancialKeypad from './FinancialKeypad';\nimport UnitConverter from './UnitConverter';\nimport History from './History';\n\ntype CalculatorMode = 'basic' | 'scientific' | 'financial' | 'converter';\n\nconst Calculator: React.FC = () => {\n  const [mode, setMode] = useState<CalculatorMode>('basic');\n  const [displayValue, setDisplayValue] = useState('0');\n  const [previousValue, setPreviousValue] = useState<string | null>(null);\n  const [operation, setOperation] = useState<string | null>(null);\n  const [waitingForOperand, setWaitingForOperand] = useState(false);\n  const [history, setHistory] = useState<string[]>([]);\n\n  const clearAll = () => {\n    setDisplayValue('0');\n    setPreviousValue(null);\n    setOperation(null);\n    setWaitingForOperand(false);\n  };\n\n  const inputDigit = (digit: string) => {\n    if (waitingForOperand) {\n      setDisplayValue(digit);\n      setWaitingForOperand(false);\n    } else {\n      setDisplayValue(displayValue === '0' ? digit : displayValue + digit);\n    }\n  };\n\n  const inputDecimal = () => {\n    if (waitingForOperand) {\n      setDisplayValue('0.');\n      setWaitingForOperand(false);\n    } else if (displayValue.indexOf('.') === -1) {\n      setDisplayValue(displayValue + '.');\n    }\n  };\n\n  const performOperation = (nextOperation: string) => {\n    const inputValue = parseFloat(displayValue);\n\n    if (previousValue === null) {\n      setPreviousValue(displayValue);\n    } else if (operation) {\n      const currentValue = parseFloat(previousValue);\n      const newValue = calculate(currentValue, inputValue, operation);\n      setDisplayValue(String(newValue));\n      setPreviousValue(String(newValue));\n      addToHistory(`${currentValue} ${operation} ${inputValue} = ${newValue}`);\n    }\n\n    setWaitingForOperand(true);\n    setOperation(nextOperation);\n  };\n\n  const calculate = (firstValue: number, secondValue: number, operation: string): number => {\n    switch (operation) {\n      case '+':\n        return firstValue + secondValue;\n      case '-':\n        return firstValue - secondValue;\n      case '×':\n        return firstValue * secondValue;\n      case '÷':\n        return firstValue / secondValue;\n      default:\n        return secondValue;\n    }\n  };\n\n  const addToHistory = (calculation: string) => {\n    setHistory(prev => [calculation, ...prev.slice(0, 9)]);\n  };\n\n  const clearHistory = () => {\n    setHistory([]);\n  };\n\n  const renderKeypad = () => {\n    switch (mode) {\n      case 'basic':\n        return (\n          <BasicKeypad\n            onDigitPress={inputDigit}\n            onDecimalPress={inputDecimal}\n            onOperationPress={performOperation}\n            onClear={clearAll}\n            onEquals={() => {\n              if (operation && previousValue) {\n                const inputValue = parseFloat(displayValue);\n                const currentValue = parseFloat(previousValue);\n                const newValue = calculate(currentValue, inputValue, operation);\n                setDisplayValue(String(newValue));\n                setPreviousValue(null);\n                setOperation(null);\n                setWaitingForOperand(true);\n                addToHistory(`${currentValue} ${operation} ${inputValue} = ${newValue}`);\n              }\n            }}\n          />\n        );\n      case 'scientific':\n        return (\n          <ScientificKeypad\n            onDigitPress={inputDigit}\n            onDecimalPress={inputDecimal}\n            onOperationPress={performOperation}\n            onClear={clearAll}\n            displayValue={displayValue}\n            setDisplayValue={setDisplayValue}\n            addToHistory={addToHistory}\n          />\n        );\n      case 'financial':\n        return (\n          <FinancialKeypad\n            onDigitPress={inputDigit}\n            onDecimalPress={inputDecimal}\n            onOperationPress={performOperation}\n            onClear={clearAll}\n            displayValue={displayValue}\n            setDisplayValue={setDisplayValue}\n            addToHistory={addToHistory}\n          />\n        );\n      case 'converter':\n        return <UnitConverter />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"calculator-container\">\n      <div className=\"calculator-header\">\n        <h1 className=\"calculator-title\">Advanced Calculator</h1>\n        <div className=\"mode-selector\">\n          {(['basic', 'scientific', 'financial', 'converter'] as CalculatorMode[]).map(\n            modeOption => (\n              <button\n                key={modeOption}\n                className={`mode-button ${mode === modeOption ? 'active' : ''}`}\n                onClick={() => setMode(modeOption)}>\n                {modeOption.charAt(0).toUpperCase() + modeOption.slice(1)}\n              </button>\n            ),\n          )}\n        </div>\n      </div>\n\n      <Display value={displayValue} />\n\n      {mode !== 'converter' && (\n        <History\n          history={history}\n          onClear={clearHistory}\n          onSelect={(value) => setDisplayValue(value)}\n        />\n      )}\n\n      <div className=\"keypad-container\">\n        {renderKeypad()}\n      </div>\n    </div>\n  );\n};\n\nexport default Calculator; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}