{"ast":null,"code":"import React,{useState}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const UnitConverter=()=>{const[conversionType,setConversionType]=useState('length');const[fromValue,setFromValue]=useState('');const[fromUnit,setFromUnit]=useState('');const[toUnit,setToUnit]=useState('');const[result,setResult]=useState('');const conversionData={length:{units:['m','km','cm','mm','mi','yd','ft','in'],conversions:{m:1,km:1000,cm:0.01,mm:0.001,mi:1609.34,yd:0.9144,ft:0.3048,in:0.0254}},weight:{units:['kg','g','mg','lb','oz','ton'],conversions:{kg:1,g:0.001,mg:0.000001,lb:0.453592,oz:0.0283495,ton:1000}},temperature:{units:['°C','°F','K'],conversions:{'°C':(value,toUnit)=>{switch(toUnit){case'°F':return value*9/5+32;case'K':return value+273.15;default:return value;}},'°F':(value,toUnit)=>{switch(toUnit){case'°C':return(value-32)*5/9;case'K':return(value-32)*5/9+273.15;default:return value;}},'K':(value,toUnit)=>{switch(toUnit){case'°C':return value-273.15;case'°F':return(value-273.15)*9/5+32;default:return value;}}}},area:{units:['m²','km²','cm²','mm²','ac','ha'],conversions:{'m²':1,'km²':1000000,'cm²':0.0001,'mm²':0.000001,'ac':4046.86,'ha':10000}},volume:{units:['L','mL','m³','cm³','gal','qt'],conversions:{'L':1,'mL':0.001,'m³':1000,'cm³':0.001,'gal':3.78541,'qt':0.946353}}};const convert=()=>{if(!fromValue||!fromUnit||!toUnit)return;const value=parseFloat(fromValue);const data=conversionData[conversionType];if(conversionType==='temperature'){const conversion=data.conversions[fromUnit];const result=conversion(value,toUnit);setResult(result.toFixed(2));}else{const fromFactor=data.conversions[fromUnit];const toFactor=data.conversions[toUnit];const result=value*fromFactor/toFactor;setResult(result.toFixed(4));}};const renderUnitButtons=()=>{const units=conversionData[conversionType].units;return/*#__PURE__*/_jsxs(\"div\",{className:\"unit-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"input-label\",children:\"From Unit:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"unit-grid\",children:units.map(unit=>/*#__PURE__*/_jsx(\"button\",{className:`unit-button ${fromUnit===unit?'selected':''}`,onClick:()=>setFromUnit(unit),children:unit},unit))}),/*#__PURE__*/_jsx(\"div\",{className:\"input-label\",children:\"To Unit:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"unit-grid\",children:units.map(unit=>/*#__PURE__*/_jsx(\"button\",{className:`unit-button ${toUnit===unit?'selected':''}`,onClick:()=>setToUnit(unit),children:unit},unit))})]});};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"mode-selector\",children:['length','weight','temperature','area','volume'].map(type=>/*#__PURE__*/_jsx(\"button\",{className:`mode-button ${conversionType===type?'active':''}`,onClick:()=>{setConversionType(type);setFromUnit('');setToUnit('');setResult('');},children:type.charAt(0).toUpperCase()+type.slice(1)},type))}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"input-label\",children:\"Value:\"}),/*#__PURE__*/_jsx(\"input\",{className:\"input-field\",value:fromValue,onChange:e=>setFromValue(e.target.value),placeholder:\"Enter value\",type:\"number\"})]}),renderUnitButtons(),/*#__PURE__*/_jsx(\"button\",{className:\"convert-button\",onClick:convert,children:\"Convert\"}),result&&/*#__PURE__*/_jsx(\"div\",{className:\"result-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"result-text\",children:[fromValue,\" \",fromUnit,\" = \",result,\" \",toUnit]})})]});};export default UnitConverter;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","UnitConverter","conversionType","setConversionType","fromValue","setFromValue","fromUnit","setFromUnit","toUnit","setToUnit","result","setResult","conversionData","length","units","conversions","m","km","cm","mm","mi","yd","ft","in","weight","kg","g","mg","lb","oz","ton","temperature","°C","value","°F","K","area","volume","convert","parseFloat","data","conversion","toFixed","fromFactor","toFactor","renderUnitButtons","className","children","map","unit","onClick","type","charAt","toUpperCase","slice","onChange","e","target","placeholder"],"sources":["/Users/alokrathaur/Documents/testProject/web/src/components/UnitConverter.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\ntype ConversionType = 'length' | 'weight' | 'temperature' | 'area' | 'volume';\n\ntype TemperatureConversion = (value: number, toUnit: string) => number;\ntype StandardConversion = number;\n\ninterface ConversionData {\n  units: string[];\n  conversions: Record<string, StandardConversion | TemperatureConversion>;\n}\n\nconst UnitConverter: React.FC = () => {\n  const [conversionType, setConversionType] = useState<ConversionType>('length');\n  const [fromValue, setFromValue] = useState('');\n  const [fromUnit, setFromUnit] = useState('');\n  const [toUnit, setToUnit] = useState('');\n  const [result, setResult] = useState('');\n\n  const conversionData: Record<ConversionType, ConversionData> = {\n    length: {\n      units: ['m', 'km', 'cm', 'mm', 'mi', 'yd', 'ft', 'in'],\n      conversions: {\n        m: 1,\n        km: 1000,\n        cm: 0.01,\n        mm: 0.001,\n        mi: 1609.34,\n        yd: 0.9144,\n        ft: 0.3048,\n        in: 0.0254,\n      },\n    },\n    weight: {\n      units: ['kg', 'g', 'mg', 'lb', 'oz', 'ton'],\n      conversions: {\n        kg: 1,\n        g: 0.001,\n        mg: 0.000001,\n        lb: 0.453592,\n        oz: 0.0283495,\n        ton: 1000,\n      },\n    },\n    temperature: {\n      units: ['°C', '°F', 'K'],\n      conversions: {\n        '°C': (value: number, toUnit: string) => {\n          switch (toUnit) {\n            case '°F':\n              return (value * 9/5) + 32;\n            case 'K':\n              return value + 273.15;\n            default:\n              return value;\n          }\n        },\n        '°F': (value: number, toUnit: string) => {\n          switch (toUnit) {\n            case '°C':\n              return (value - 32) * 5/9;\n            case 'K':\n              return (value - 32) * 5/9 + 273.15;\n            default:\n              return value;\n          }\n        },\n        'K': (value: number, toUnit: string) => {\n          switch (toUnit) {\n            case '°C':\n              return value - 273.15;\n            case '°F':\n              return (value - 273.15) * 9/5 + 32;\n            default:\n              return value;\n          }\n        },\n      },\n    },\n    area: {\n      units: ['m²', 'km²', 'cm²', 'mm²', 'ac', 'ha'],\n      conversions: {\n        'm²': 1,\n        'km²': 1000000,\n        'cm²': 0.0001,\n        'mm²': 0.000001,\n        'ac': 4046.86,\n        'ha': 10000,\n      },\n    },\n    volume: {\n      units: ['L', 'mL', 'm³', 'cm³', 'gal', 'qt'],\n      conversions: {\n        'L': 1,\n        'mL': 0.001,\n        'm³': 1000,\n        'cm³': 0.001,\n        'gal': 3.78541,\n        'qt': 0.946353,\n      },\n    },\n  };\n\n  const convert = () => {\n    if (!fromValue || !fromUnit || !toUnit) return;\n\n    const value = parseFloat(fromValue);\n    const data = conversionData[conversionType];\n\n    if (conversionType === 'temperature') {\n      const conversion = data.conversions[fromUnit] as TemperatureConversion;\n      const result = conversion(value, toUnit);\n      setResult(result.toFixed(2));\n    } else {\n      const fromFactor = data.conversions[fromUnit] as StandardConversion;\n      const toFactor = data.conversions[toUnit] as StandardConversion;\n      const result = (value * fromFactor) / toFactor;\n      setResult(result.toFixed(4));\n    }\n  };\n\n  const renderUnitButtons = () => {\n    const units = conversionData[conversionType].units;\n    return (\n      <div className=\"unit-container\">\n        <div className=\"input-label\">From Unit:</div>\n        <div className=\"unit-grid\">\n          {units.map(unit => (\n            <button\n              key={unit}\n              className={`unit-button ${fromUnit === unit ? 'selected' : ''}`}\n              onClick={() => setFromUnit(unit)}>\n              {unit}\n            </button>\n          ))}\n        </div>\n\n        <div className=\"input-label\">To Unit:</div>\n        <div className=\"unit-grid\">\n          {units.map(unit => (\n            <button\n              key={unit}\n              className={`unit-button ${toUnit === unit ? 'selected' : ''}`}\n              onClick={() => setToUnit(unit)}>\n              {unit}\n            </button>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <div className=\"mode-selector\">\n        {(['length', 'weight', 'temperature', 'area', 'volume'] as ConversionType[]).map(\n          type => (\n            <button\n              key={type}\n              className={`mode-button ${conversionType === type ? 'active' : ''}`}\n              onClick={() => {\n                setConversionType(type);\n                setFromUnit('');\n                setToUnit('');\n                setResult('');\n              }}>\n              {type.charAt(0).toUpperCase() + type.slice(1)}\n            </button>\n          ),\n        )}\n      </div>\n\n      <div className=\"input-container\">\n        <div className=\"input-label\">Value:</div>\n        <input\n          className=\"input-field\"\n          value={fromValue}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFromValue(e.target.value)}\n          placeholder=\"Enter value\"\n          type=\"number\"\n        />\n      </div>\n\n      {renderUnitButtons()}\n\n      <button\n        className=\"convert-button\"\n        onClick={convert}>\n        Convert\n      </button>\n\n      {result && (\n        <div className=\"result-container\">\n          <div className=\"result-text\">\n            {fromValue} {fromUnit} = {result} {toUnit}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UnitConverter; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}